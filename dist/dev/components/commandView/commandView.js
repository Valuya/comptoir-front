var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/// <reference path="../../typings/_custom.d.ts" />
var angular2_1 = require('angular2/angular2');
var commandService_1 = require('services/commandService');
var itemService_1 = require('services/itemService');
var autoFocus_1 = require('directives/autoFocus');
var ToAddItem = (function () {
    function ToAddItem() {
        this.name = null;
        this.amount = 1;
        this.price = null;
    }
    return ToAddItem;
})();
var CommandView = (function () {
    function CommandView(commandService) {
        this.editingGlobalReduction = false;
        this.validate = new angular2_1.EventEmitter();
        this.validated = false;
        this.commandService = commandService;
        this.renewToAddCustomItem();
        this.toAddReductionItem = null;
    }
    CommandView.prototype.renewToAddCustomItem = function () {
        this.toAddItem = new ToAddItem();
    };
    CommandView.prototype.doClearCommand = function () {
        this.commandService.items = [];
        this.commandService.globalReduction = null;
        this.commandService.calcTotalPrice();
    };
    CommandView.prototype.doClearItem = function (commandItem) {
        this.commandService.removeCommandItem(commandItem);
    };
    CommandView.prototype.doAddCustomItem = function () {
        var item = new itemService_1.Item(undefined);
        item.currentPrice = this.toAddItem.price;
        item.name = this.toAddItem.name;
        item.reference = null;
        var commandItem = new commandService_1.CommandItem(item);
        commandItem.amount = this.toAddItem.amount;
        this.commandService.addCommandItem(commandItem);
        this.renewToAddCustomItem();
    };
    CommandView.prototype.doStartItemReduction = function (commandItem) {
        this.toAddReductionItem = commandItem;
    };
    CommandView.prototype.applyItemReduction = function (event) {
        if (event.which == 13) {
            var reduction = event.target.value;
            this.toAddReductionItem.reduction = reduction;
            this.commandService.calcItemPrice(this.toAddReductionItem);
            this.commandService.calcTotalPrice();
            this.toAddReductionItem = null;
            return;
        }
        if (event.which == 27) {
            this.toAddReductionItem = null;
            return;
        }
    };
    CommandView.prototype.applyGlobalReduction = function (event) {
        if (event.which == 13) {
            var reduction = event.target.value;
            this.commandService.globalReduction = reduction;
            this.commandService.calcTotalPrice();
            this.editingGlobalReduction = false;
            return;
        }
        if (event.which == 27) {
            this.editingGlobalReduction = false;
            return;
        }
    };
    CommandView.prototype.doValidate = function () {
        this.validated = true;
        this.validate.next(this.validated);
    };
    CommandView.prototype.doUnvalidate = function () {
        this.validated = false;
        this.validate.next(this.validated);
    };
    CommandView = __decorate([
        angular2_1.Component({
            selector: 'commandView',
            events: ['validate'],
            properties: ['validated']
        }),
        angular2_1.View({
            templateUrl: './components/commandView/commandView.html',
            styleUrls: ['./components/commandView/commandView.css'],
            directives: [angular2_1.NgFor, angular2_1.NgIf, autoFocus_1.AutoFocusDirective]
        }), 
        __metadata('design:paramtypes', [commandService_1.CommandService])
    ], CommandView);
    return CommandView;
})();
exports.CommandView = CommandView;

//# sourceMappingURL=data:application/json;base64,